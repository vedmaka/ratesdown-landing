'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Collapsible = function () {
    function Collapsible(element) {
        var toggleClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'open';
        var targetElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, Collapsible);

        this._element = element;
        this._toggleClassName = toggleClassName;
        this._targetElement = targetElement;
        this._bind();
    }

    _createClass(Collapsible, [{
        key: '_bind',
        value: function _bind() {
            var _this = this;

            this._element.addEventListener('click', function (e) {
                return _this._onActivate(e);
            });
            this._element.addEventListener('touchend', function (e) {
                return _this._onActivate(e);
            });
        }
    }, {
        key: '_onActivate',
        value: function _onActivate(event) {
            event.preventDefault();
            var classElement = this._element;
            if (this._targetElement !== null) {
                classElement = this._targetElement;
            }
            classElement.classList.toggle(this._toggleClassName);
        }
    }]);

    return Collapsible;
}();

var collapsibles = document.querySelectorAll('.collapsible');
if (collapsibles.length) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = collapsibles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var element = _step.value;

            new Collapsible(element, 'faq-open');
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

var mobileMenuButton = document.getElementById('mobile-menu-button');
if (mobileMenuButton) {
    var menuBlock = document.getElementById('menu-mobile');
    new Collapsible(mobileMenuButton, 'menu--open', menuBlock);
    new Collapsible(mobileMenuButton, 'menu-button--active');
}